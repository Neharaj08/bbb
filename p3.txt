mkdir python-docker-app
cd python-docker-app

app.py
from flask import Flask
app = Flask(__name__)

@app.route('/')
def home():
    return "Hello from Dockerized Flask app!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

requirements.txt
flask

Dockerfile
# Use Python base image
FROM python:3.12-slim

# Set working directory
WORKDIR /app

# Copy app files
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .

# Expose port and run app
EXPOSE 5000
CMD ["python", "app.py"]


docker build -t neharaj08/python-docker-app .
docker run -p 5000:5000 neharaj08/python-docker-app

docker login
docker push neharaj08/python-docker-app

docker build -t neharaj08/python-docker-app .
docker run -p 5000:5000 neharaj08/python-docker-app

docker login
docker push neharaj08/python-docker-app

docker-compose.yml
version: '3'

services:
  web:
    build: .
    ports:
      - "5000:5000"

docker compose up




app.js
const express = require('express');
const app = express();
const PORT = 5000;

app.get('/', (req, res) => {
  res.send('Hello from a Dockerized Node.js App!');
});

app.listen(PORT, () => {
  console.log(`Server is running at http://localhost:${PORT}`);
});


package.json
{
  "name": "node-docker-app",
  "version": "1.0.0",
  "description": "A simple Node.js app for Docker demo",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "^4.18.2"
  }
}


Dockerfile
# Use official Node.js image
FROM node:18

# Set working directory
WORKDIR /app

# Copy and install dependencies
COPY package*.json ./
RUN npm install

# Copy app source
COPY . .

# Expose port and start app
EXPOSE 5000
CMD ["npm", "start"]





docker-compose.yml


