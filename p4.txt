 minikube start --driver=docker
  minikube status
  
 kubectl get nodes

 n: kubectl apply -f pod.yaml
 
 kubectl get pods


Save this as pod.yaml:
apiVersion: v1
kind: Pod
metadata:
 name: my-nginx
spec:
 containers:
 - name: nginx
 image: nginx:latest
 ports:
 - containerPort: 80
 
  minikube ssh
  
 curl <nginx ip-address> to See the NGINX welcome page inside
the cluster


app.py

from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello from App 1!! Kubernetes, also known as K8s, is awesome!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
    
requirements.txt
flask==3.0.0

Dockerfile
FROM python:3.12-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY app.py .
EXPOSE 5000
CMD ["python", "app.py"]

docker build -t neharaj08/app1-k8s:latest .

docker push neharaj08/app1-k8s:latest

deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hw-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hw-container
        image: yourdockerhubusername/app1-k8s:latest
        ports:
        - containerPort: 5000
        
service.yaml

apiVersion: v1
kind: Service
metadata:
  name: hello-world
spec:
  type: NodePort
  selector:
    app: hello-world
  ports:
    - port: 5000
      targetPort: 5000

kubectl apply -f deployment.yaml
kubectl apply -f service.yaml

kubectl port-forward svc/hello-world 5000:5000



app.js
const express = require('express');
const app = express();
const PORT = 3000;

// Route for the root URL
app.get('/', (req, res) => {
  res.send('Hello, World!');
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});



Dockerfile
# Use official Node.js runtime as a parent image
FROM node:14
# Set working directory in the container
WORKDIR /usr/src/app
# Copy package.json and package-lock.json

COPY package*.json ./
# Install dependencies
RUN npm install
# Copy the rest of the application source code
COPY . .
# Expose port 3000
EXPOSE 3000
# Run the app when the container launches
CMD ["npm","start"]

package.json
{
"name": "hello-world-app",
"version": "1.0.0",
"main": "app.js",
"scripts": {
  "start": "node app.js"
},
"dependencies": {
  "express": "^4.17.1"
}
}


hello-world-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hello-world-app
  template:
    metadata:
      labels:
        app: hello-world-app
    spec:
      containers:
        - name: hello-world-container
          image: your-dockerhub-username/hello-world-app:v1
          ports:
            - containerPort: 3000


hello-world-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hello-world-service
spec:
  selector:
    app: hello-world-app
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
      nodePort: 30080  # Optional custom NodePort for browser access

docker login

docker build -t ankithalg609/hello-world-app:v1 .

docker push ankithalg609/hello-world-app:v1

minikube start

kubectl apply -f hello-world-deployment.yaml
kubectl apply -f hello-world-service.yaml

kubectl get pods
kubectl get services






	



